// WARNING: This file is automatically generated by puppeteer. Any modifications made by hand will be lost if the generator is run again.

function generatedResizeFn()
{
    // rotxt
    var div = $( "#rotxt_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    div.resizable({
        minHeight: div.height(),
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
    
    // rwtxt
    var div = $( "#rwtxt_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    div.resizable({
        minHeight: div.height(),
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
    
    // rochk
    /*var div = $( "#rochk_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    var minDivHeight = Math.max(25, minDivWidth);
    div.resizable({
        minHeight: minDivHeight,
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
    div.height(minDivHeight);*/
    
    // rwchk
    var div = $( "#rwchk_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    div.resizable({
        minHeight: div.height(),
        minWidth: minDivWidth
      });
    div.width(minDivWidth);

    // roradio
    var div = $( "#roradio_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    div.resizable({
        minHeight: div.height(),
        minWidth: minDivWidth
      });
    div.width(minDivWidth);

    // rwradio
    var div = $( "#rwradio_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    div.resizable({
        minHeight: div.height(),
        minWidth: minDivWidth
      });
    div.width(minDivWidth);

    // roslide
    var div = $( "#roslide_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    var minDivHeight = div.height();
    div.resizable({
        minHeight: minDivHeight,
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
    div.height(minDivHeight);

    // rwslide
    var div = $( "#rwslide_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    var minDivHeight = div.height();
    div.resizable({
        minHeight: minDivHeight,
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
    div.height(minDivHeight);

    // history
    var div = $( "#history_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width(), 600);
    div.resizable({
        minHeight: minDivWidth/3,
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
    div.height(minDivWidth/3);
    var div = $( "#history" );
    div.resizable({
        minHeight: minDivWidth/3,
        minWidth: minDivWidth
      });

    // tabs1
    $( ".tabs" ).css('height','auto');
    /*var minDivWidth = Math.max(div.width(), div.parent().parent().width());
    var minDivHeight = Math.max(div.height(), div.parent().parent().height())
    div.resizable({
        minHeight: 1000,
        minWidth: minDivWidth
      });
    div.width(minDivWidth);*/

    // history
    var div = $( "#multihistory_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width(), 600);
    div.resizable({
        minHeight: minDivWidth/3,
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
    div.height(minDivWidth/3);
    var div = $( "#multihistory" );
    div.resizable({
        minHeight: minDivWidth/3,
        minWidth: minDivWidth
      });

    // roclr
    var div = $( "#roclr_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    div.resizable({
        minHeight: div.height(),
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
    
    // rwclr
    var div = $( "#rwclr_div" );
    var minDivWidth = Math.max(div.width(), div.parent().width());
    div.resizable({
        minHeight: div.height(),
        minWidth: minDivWidth
      });
    div.width(minDivWidth);
}

function generatedCheckFunction(event)
{
  /*switch(event.target.id)
  {
    case "rwradio_0":
      $( "#roradio_0" ).iCheck('check');
      break;
    case "rwradio_1":
      $( "#roradio_1" ).iCheck('check');
      break;
    case "rwradio_2":
      $( "#roradio_2" ).iCheck('check');
      break;
    case "rwradio_3":
      $( "#roradio_3" ).iCheck('check');
      break;
  }*/
}

function generatedDialFn()
{
  var input = $( "#roslide" );
  input.knob({
    min: 25,
    max: 100,
    step: 1,
    readOnly: true,
    angleOffset: -125,
    angleArc: 250,
    fgColor:"#33b5e5",
    bgColor:"#2f2d2d"
  });
  
  var input = $( "#rwslide" );
  input.knob({
    min: 0,
    max: 30,
    step: .1,
    angleOffset: -125,
    angleArc: 250,
    fgColor:"#33b5e5",
    bgColor:"#2f2d2d",
    'change' : function (v) { 
      var obj = {
        tab1: {
          Group1: {
            rwslide: v
          }
        }
      };
      websocket.send(JSON.stringify(obj));
    }
  });
}

function generatedGraphFn()
{
  historyPlot = $.plot($("#history"), [ { color: 3, data: [ ] } ], 
    {
      colors: ["#33b5e5"],
      yaxis: 
      { 
        max: 2
      },
      grid: 
      {
				hoverable: true
			},
      crosshair:
      {
        mode: "x"
      },
      lines:
      {
        show: true,
        fill: true,
        fillColor:  {colors:  [{ opacity: 0.1 }, { opacity: 0.1 }] } //[{ opacity: 0.1 }, { opacity: 0.8 }]
      }
    }
  );

  $("<div id='history_tooltip'></div>").css({
    position: "absolute",
    display: "none",
    border: "1px solid #666666",
    padding: "2px",
    "background-color": "#000000",
    opacity: 0.80
  }).appendTo("body");

  $("#history").bind("plothover", function (event, pos, item) 
  {
    if (item) {
      var x = item.datapoint[0].toFixed(2),
        y = item.datapoint[1].toFixed(2);

      $("#history_tooltip").html("(" + x + ", " + y + ")")
        .css({top: item.pageY+5, left: item.pageX+5})
        .fadeIn(200);
    } else {
      $("#history_tooltip").hide();
    }
  });

  multiHistoryPlot = $.plot($("#multihistory"), [ multiHistoryData ], 
    {
      yaxis: 
      { 
        max: 2
      },
      grid: 
      {
				hoverable: true
			},
      crosshair:
      {
        mode: "x"
      },
      lines:
      {
        show: true,
        fill: true,
        fillColor:  {colors:  [{ opacity: 0.1 }, { opacity: 0.1 }] } //[{ opacity: 0.1 }, { opacity: 0.8 }]
      }
    }
  );

  $("<div id='multihistory_tooltip'></div>").css({
    position: "absolute",
    display: "none",
    border: "1px solid #666666",
    padding: "2px",
    "background-color": "#000000",
    opacity: 0.80
  }).appendTo("body");

  $("#multihistory").bind("plothover", function (event, pos, item) 
  {
    if (item) {
      var x = item.datapoint[0].toFixed(2),
        y = item.datapoint[1].toFixed(2);

      $("#multihistory_tooltip").html("(" + x + ", " + y + ")")
        .css({top: item.pageY+5, left: item.pageX+5})
        .fadeIn(200);
    } else {
      $("#multihistory_tooltip").hide();
    }
  });
}

function generatedUpdateFn(obj)
{
  if(typeof obj.tab1 !== 'undefined')
  {
    if(typeof obj.tab1.Group1 !== 'undefined')
    {
      if(typeof obj.tab1.Group1.rotxt !== 'undefined') 
      {
        $("#rotxt").html(obj.tab1.Group1.rotxt);
      }
      if(typeof obj.tab1.Group1.rwtxt !== 'undefined') 
      {
        $("#rwtxt").html(obj.tab1.Group1.rwtxt);
      }
      if(typeof obj.tab1.Group1.rwchk !== 'undefined')
      {
        if(obj.tab1.Group1.rwchk)
        {
          $( "#rwchk" ).removeClass("toggle-false");
          $( "#rwchk" ).addClass("toggle-true");
        }
        else
        {
          $( "#rwchk" ).removeClass("toggle-true");
          $( "#rwchk" ).addClass("toggle-false");
        }
      }
      if(typeof obj.tab1.Group1.rochk !== 'undefined')
      {
        if(obj.tab1.Group1.rochk)
        {
          $( "#rochk" ).removeClass("toggle-false");
          $( "#rochk" ).addClass("toggle-true");
        }
        else
        {
          $( "#rochk" ).removeClass("toggle-true");
          $( "#rochk" ).addClass("toggle-false");
        }
      }
      if(typeof obj.tab1.Group1.rwradio !== 'undefined')
      {
        $( "#" + obj.tab1.Group1.rwradio ).iCheck('check');
      }
      if(typeof obj.tab1.Group1.roradio !== 'undefined')
      {
        $( "#" + obj.tab1.Group1.roradio ).iCheck('check');
      }
      if(typeof obj.tab1.Group1.rwslide !== 'undefined')
      {
        $( "#rswlide" ).val(obj.tab1.Group1.rwslide).trigger('change');
      }
      if(typeof obj.tab1.Group1.roslide !== 'undefined')
      {
        $( "#roslide" ).val(obj.tab1.Group1.roslide).trigger('change');
      }
    }
    if(typeof obj.tab1.Group2 !== 'undefined')
    {
      if(typeof obj.tab1.Group2.drop !== 'undefined')
      {
        $('#drop').val(obj.tab1.Group2.drop);
        $("#drop").selectmenu("refresh");
      }
      if(typeof obj.tab1.Group2.history !== 'undefined')
      {
        if (historyData.length > 0)
        {
          historyData = historyData.slice(obj.tab1.Group2.history.length);
          historyData = historyData.concat(obj.tab1.Group2.history);
        }
        else
          historyData = obj.tab1.Group2.history;
        historyPlot.setData([historyData]);
        historyPlot.setupGrid();
        historyPlot.draw();
      }
    }
  }
  if(typeof obj.tab2 !== 'undefined')
  {
    if(typeof obj.tab2.subtab1 !== 'undefined')
    {
      if(typeof obj.tab2.subtab1.multihistory0 !== 'undefined')
      {
        if (multiHistoryData[0].data.length > 0)
        {
          multiHistoryData[0].data = multiHistoryData[0].data.slice(obj.tab2.subtab1.multihistory0.length);
          multiHistoryData[0].data = multiHistoryData[0].data.concat(obj.tab2.subtab1.multihistory0);
        }
        else
          multiHistoryData[0].data = obj.tab2.subtab1.multihistory0;
        multiHistoryPlot.setData(multiHistoryData);
        multiHistoryPlot.setupGrid();
        multiHistoryPlot.draw();
      }
      if(typeof obj.tab2.subtab1.multihistory1 !== 'undefined')
      {
        if (multiHistoryData[1].data.length > 0)
        {
          multiHistoryData[1].data = multiHistoryData[1].data.slice(obj.tab2.subtab1.multihistory1.length);
          multiHistoryData[1].data = multiHistoryData[1].data.concat(obj.tab2.subtab1.multihistory1);
        }
        else
          multiHistoryData[1].data = obj.tab2.subtab1.multihistory1;
        multiHistoryPlot.setData(multiHistoryData);
        multiHistoryPlot.setupGrid();
        multiHistoryPlot.draw();
      }
      if(typeof obj.tab2.subtab1.multihistory2 !== 'undefined')
      {
        if (multiHistoryData[2].data.length > 0)
        {
          multiHistoryData[2].data = multiHistoryData[2].data.slice(obj.tab2.subtab1.multihistory2.length);
          multiHistoryData[2].data = multiHistoryData[2].data.concat(obj.tab2.subtab1.multihistory2);
        }
        else
          multiHistoryData[2].data = obj.tab2.subtab1.multihistory2;
        multiHistoryPlot.setData(multiHistoryData);
        multiHistoryPlot.setupGrid();
        multiHistoryPlot.draw();
      }
    }
    if(typeof obj.tab2.subtab2 !== 'undefined')
    {
      if(typeof obj.tab2.subtab2.roclr !== 'undefined')
      {
        $( "#roclr" ).css('background', obj.tab2.subtab2.roclr);
      }
      if(typeof obj.tab2.subtab2.rwclr !== 'undefined')
      {
        $("rwclr").colpickSetColor(obj.tab2.subtab2.rwclr);
      }
    }
  }
}

var historyData = [];
var lastHistoryX = 2*Math.PI;
var historyPlot = null;

var multiHistoryData = [{data: []},{data: []},{data: []}];
var multiHistoryPlot = null;

function fetchHistoryData()
{
  for(var i = 0; i < 2 * Math.PI; i+= (2*Math.PI)/100)
  {
    historyData.push([i, Math.sin(i) + 1]);
  }
  return historyData;
}

function generatedInputHandlerFn()
{
  $("#rwtxt").change(function()
  {
    var obj = {
      tab1: {
        Group1: {
          rwtxt: $("#rwtxt")[0].value
        }
      }      
    };
    websocket.send(JSON.stringify(obj));
  });

  $("#rwchk").change(function()
  {
    var obj = {
      tab1: {
        Group1: {
          rwchk: $("#rwchk")[0].checked
        }
      }
    };
    websocket.send(JSON.stringify(obj));
  });

  $("#rwradio_0").on('ifChecked', function()
  {
    var obj = {
      tab1: {
        Group1: {
          rwradio: "rwradio_0"
        }
      }
    };
    websocket.send(JSON.stringify(obj));
  });

  $("#rwradio_1").on('ifChecked', function()
  {
    var obj = {
      tab1: {
        Group1: {
          rwradio: "rwradio_1"
        }
      }
    };
    if($("#rwradio_1")[0].checked) websocket.send(JSON.stringify(obj));
  });

  $("#rwradio_2").on('ifChecked', function()
  {
    var obj = {
      tab1: {
        Group1: {
          rwradio: "rwradio_2"
        }
      }
    };
    if($("#rwradio_2")[0].checked) websocket.send(JSON.stringify(obj));
  });

  $("#rwradio_3").on('ifChecked', function()
  {
    var obj = {
      tab1: {
        Group1: {
          rwradio: "rwradio_3"
        }
      }
    };
    if($("#rwradio_3")[0].checked) websocket.send(JSON.stringify(obj));
  });

  $( "#drop" ).on( "selectmenuchange", function(event, ui)
  {
    var obj = {
      tab1: {
        Group2: {
          drop: ui.item.value
        }
      }
    }
    websocket.send(JSON.stringify(obj));
  });

  $('#rwclr').colpick({
    color: '#0000ff',
    flat: true,
    colorScheme: 'dark',
    submit: 0,
    onChange: function (col, hex, rgb) {
      var obj = {
        tab2: {
          subtab2: {
            rwclr: '#'+hex
          }
        }
      }
      websocket.send(JSON.stringify(obj));
    }
  });
}